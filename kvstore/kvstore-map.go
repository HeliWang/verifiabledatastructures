/*

Copyright 2017 Continusec Pty Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/

package kvstore

import (
	"golang.org/x/net/context"

	"github.com/continusec/go-client/continusec"
)

type bbMap struct {
	account *bbAccount
	name    string
}

// MutationLog returns a pointer to the underlying Verifiable Log that represents
// a log of mutations to this map. Since this Verifiable Log is managed by this map,
// the log returned cannot be directly added to (to mutate, call Set and Delete methods
// on the map), however all read-only functions are present.
func (m *bbMap) MutationLog() continusec.VerifiableLog {
	return &bbLog{
		account: m.account,
		logType: logTypeMapMutation,
		name:    m.name,
	}
}

// TreeHeadLog returns a pointer to the underlying Verifiable Log that represents
// a log of tree heads generated by this map. Since this Verifiable Map is managed by this map,
// the log returned cannot be directly added to however all read-only functions are present.
func (m *bbMap) TreeHeadLog() continusec.VerifiableLog {
	return &bbLog{
		account: m.account,
		logType: logTypeMapTreeHead,
		name:    m.name,
	}
}

// Create will send an API call to create a new map with the name specified when the
// VerifiableMap object was instantiated.
func (m *bbMap) Create() error {
	return ErrNotImplemented
}

// Destroy will send an API call to delete this map - this operation removes it permanently,
// and renders the name unusable again within the same account, so please use with caution.
func (m *bbMap) Destroy() error {
	return ErrNotImplemented
}

// Get will return the value for the given key at the given treeSize. Pass continusec.Head
// to always get the latest value. factory is normally one of RawDataEntryFactory, JsonEntryFactory or RedactedJsonEntryFactory.
//
// Clients normally instead call VerifiedGet() with a MapTreeHead returned by VerifiedLatestMapState as this will also perform verification of inclusion.
func (m *bbMap) Get(key []byte, treeSize int64, factory continusec.VerifiableEntryFactory) (*continusec.MapInclusionProof, error) {
	return nil, ErrNotImplemented
}

// VerifiedGet gets the value for the given key in the specified MapTreeState, and verifies that it is
// included in the MapTreeHead (wrapped by the MapTreeState) before returning.
// factory is normally one of RawDataEntryFactory, JsonEntryFactory or RedactedJsonEntryFactory.
func (m *bbMap) VerifiedGet(key []byte, mapHead *continusec.MapTreeState, factory continusec.VerifiableEntryFactory) (continusec.VerifiableEntry, error) {
	return nil, ErrNotImplemented
}

// Set will generate a map mutation to set the given value for the given key.
// While this will return quickly, the change will be reflected asynchronously in the map.
// Returns an AddEntryResponse which contains the leaf hash for the mutation log entry.
func (m *bbMap) Set(key []byte, value continusec.UploadableEntry) (*continusec.AddEntryResponse, error) {
	return nil, ErrNotImplemented
}

// Update will generate a map mutation to set the given value for the given key, conditional on the
// previous leaf hash being that specified by previousLeaf.
// While this will return quickly, the change will be reflected asynchronously in the map.
// Returns an AddEntryResponse which contains the leaf hash for the mutation log entry.
func (m *bbMap) Update(key []byte, value continusec.UploadableEntry, previousLeaf continusec.MerkleTreeLeaf) (*continusec.AddEntryResponse, error) {
	return nil, ErrNotImplemented

}

// Delete will set generate a map mutation to delete the value for the given key. Calling Delete
// is equivalent to calling Set with an empty value.
// While this will return quickly, the change will be reflected asynchronously in the map.
// Returns an AddEntryResponse which contains the leaf hash for the mutation log entry.
func (m *bbMap) Delete(key []byte) (*continusec.AddEntryResponse, error) {
	return nil, ErrNotImplemented

}

// TreeHead returns map root hash for the map at the given tree size. Specify continusec.Head
// to receive a root hash for the latest tree size.
func (m *bbMap) TreeHead(treeSize int64) (*continusec.MapTreeHead, error) {
	return nil, ErrNotImplemented

}

// BlockUntilSize blocks until the map has caught up to a certain size. This polls
// TreeHead() until such time as a new tree hash is produced that is of at least this
// size.
//
// This is intended for test use.
func (m *bbMap) BlockUntilSize(treeSize int64) (*continusec.MapTreeHead, error) {
	return nil, ErrNotImplemented

}

// VerifiedLatestMapState fetches the latest MapTreeState, verifies it is consistent with,
// and newer than, any previously passed state.
func (m *bbMap) VerifiedLatestMapState(prev *continusec.MapTreeState) (*continusec.MapTreeState, error) {
	return nil, ErrNotImplemented

}

// VerifiedMapState returns a wrapper for the MapTreeHead for a given tree size, along with
// a LogTreeHead for the TreeHeadLog that has been verified to contain this map tree head.
// The value returned by this will have been proven to be consistent with any passed prev value.
// Note that the TreeHeadLogTreeHead returned may differ between calls, even for the same treeSize,
// as all future LogTreeHeads can also be proven to contain the MapTreeHead.
//
// Typical clients that only need to access current data will instead use VerifiedLatestMapState()
// Can return nil, nil if the map is empty (and prev was nil)
func (m *bbMap) VerifiedMapState(prev *continusec.MapTreeState, treeSize int64) (*continusec.MapTreeState, error) {
	return nil, ErrNotImplemented

}

// VerifyMap (Experimental API surface, likely to change) is a utility method for auditors
// that wish to audit the full content of a map, as well as the map operation. This method
// will verify every entry in the TreeHeadLogTreeHead between prev and head - and to do so
// will retrieve *all* mutation entries from the underlying mutation log, and play them
// forward in an in-memory map copy.
//
// In addition to verifying the correct operation of the map itself, a client also specifies
// an auditFunc that is called for each set value operation that results in a change to the
// map itself. As such a client can also verify any property desired around the actual
// key/values themselves that are being manipulated. Note that not every mutation will result
// in a call to auditFunc - operations that result in no change to the map will not call
// the audit function.
//
// To verify all every log tree head entry, pass nil for prev, which will also bypass consistency proof checking. Head must not be nil.
//
// Example usage:
//
//	latestMapState, err := vmap.VerifiedLatestMapState(nil)
//	if err != nil {
//		...
//	}
//
//	err = vmap.VerifyMap(ctx, nil, latestMapState, continusec.RedactedJsonEntryFactory, func(ctx context.Context, idx int64, key []byte, value continusec.VerifiableEntry) error {
//		... // verify anything you like about the content
//		return nil
//	})
//	if err != nil {
//		...
//	}
//
// While suitable for small to medium maps, this requires the entire map be built in-memory
// which may not be suitable for larger systems that will have more complex requirements.
func (m *bbMap) VerifyMap(ctx context.Context, prev *continusec.MapTreeState, head *continusec.MapTreeState, factory continusec.VerifiableEntryFactory, auditFunc continusec.MapAuditFunction) error {
	return ErrNotImplemented
}

// Name returns the name of the map
func (m *bbMap) Name() string {
	return m.name
}
