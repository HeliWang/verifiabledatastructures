/*

Copyright 2017 Continusec Pty Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/

package kvstore

import "github.com/continusec/go-client/continusec"

type bbMap struct {
	account *bbAccount
	name    string
}

// MutationLog returns a pointer to the underlying Verifiable Log that represents
// a log of mutations to this map. Since this Verifiable Log is managed by this map,
// the log returned cannot be directly added to (to mutate, call Set and Delete methods
// on the map), however all read-only functions are present.
func (m *bbMap) MutationLog() continusec.VerifiableLog {
	return &bbLog{
		account: m.account,
		logType: logTypeMapMutation,
		name:    m.name,
	}
}

// TreeHeadLog returns a pointer to the underlying Verifiable Log that represents
// a log of tree heads generated by this map. Since this Verifiable Map is managed by this map,
// the log returned cannot be directly added to however all read-only functions are present.
func (m *bbMap) TreeHeadLog() continusec.VerifiableLog {
	return &bbLog{
		account: m.account,
		logType: logTypeMapTreeHead,
		name:    m.name,
	}
}

// Create will send an API call to create a new map with the name specified when the
// VerifiableMap object was instantiated.
func (m *bbMap) Create() error {
	return ErrNotImplemented
}

// Destroy will send an API call to delete this map - this operation removes it permanently,
// and renders the name unusable again within the same account, so please use with caution.
func (m *bbMap) Destroy() error {
	return ErrNotImplemented
}

// Get will return the value for the given key at the given treeSize. Pass continusec.Head
// to always get the latest value. factory is normally one of RawDataEntryFactory, JsonEntryFactory or RedactedJsonEntryFactory.
//
// Clients normally instead call VerifiedGet() with a MapTreeHead returned by VerifiedLatestMapState as this will also perform verification of inclusion.
func (m *bbMap) Get(key []byte, treeSize int64, factory continusec.VerifiableEntryFactory) (*continusec.MapInclusionProof, error) {
	return nil, ErrNotImplemented
}

// Set will generate a map mutation to set the given value for the given key.
// While this will return quickly, the change will be reflected asynchronously in the map.
// Returns an AddEntryResponse which contains the leaf hash for the mutation log entry.
func (m *bbMap) Set(key []byte, value continusec.UploadableEntry) (*continusec.AddEntryResponse, error) {
	return nil, ErrNotImplemented
}

// Update will generate a map mutation to set the given value for the given key, conditional on the
// previous leaf hash being that specified by previousLeaf.
// While this will return quickly, the change will be reflected asynchronously in the map.
// Returns an AddEntryResponse which contains the leaf hash for the mutation log entry.
func (m *bbMap) Update(key []byte, value continusec.UploadableEntry, previousLeaf continusec.MerkleTreeLeaf) (*continusec.AddEntryResponse, error) {
	return nil, ErrNotImplemented

}

// Delete will set generate a map mutation to delete the value for the given key. Calling Delete
// is equivalent to calling Set with an empty value.
// While this will return quickly, the change will be reflected asynchronously in the map.
// Returns an AddEntryResponse which contains the leaf hash for the mutation log entry.
func (m *bbMap) Delete(key []byte) (*continusec.AddEntryResponse, error) {
	return nil, ErrNotImplemented

}

// TreeHead returns map root hash for the map at the given tree size. Specify continusec.Head
// to receive a root hash for the latest tree size.
func (m *bbMap) TreeHead(treeSize int64) (*continusec.MapTreeHead, error) {
	return nil, ErrNotImplemented

}

// Name returns the name of the map
func (m *bbMap) Name() string {
	return m.name
}
