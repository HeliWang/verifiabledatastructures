// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LogType int32

const (
	LogType_STRUCT_TYPE_LOG          LogType = 0
	LogType_STRUCT_TYPE_MUTATION_LOG LogType = 1
	LogType_STRUCT_TYPE_TREEHEAD_LOG LogType = 2
)

var LogType_name = map[int32]string{
	0: "STRUCT_TYPE_LOG",
	1: "STRUCT_TYPE_MUTATION_LOG",
	2: "STRUCT_TYPE_TREEHEAD_LOG",
}
var LogType_value = map[string]int32{
	"STRUCT_TYPE_LOG":          0,
	"STRUCT_TYPE_MUTATION_LOG": 1,
	"STRUCT_TYPE_TREEHEAD_LOG": 2,
}

func (x LogType) String() string {
	return proto.EnumName(LogType_name, int32(x))
}
func (LogType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type EntryFormat int32

const (
	EntryFormat_ENTRY_FORMAT_RAW      EntryFormat = 0
	EntryFormat_ENTRY_FORMAT_JSON     EntryFormat = 1
	EntryFormat_ENTRY_FORMAT_MUTATION EntryFormat = 2
)

var EntryFormat_name = map[int32]string{
	0: "ENTRY_FORMAT_RAW",
	1: "ENTRY_FORMAT_JSON",
	2: "ENTRY_FORMAT_MUTATION",
}
var EntryFormat_value = map[string]int32{
	"ENTRY_FORMAT_RAW":      0,
	"ENTRY_FORMAT_JSON":     1,
	"ENTRY_FORMAT_MUTATION": 2,
}

func (x EntryFormat) String() string {
	return proto.EnumName(EntryFormat_name, int32(x))
}
func (EntryFormat) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type MapMutationAction int32

const (
	MapMutationAction_MAP_MUTATION_SET    MapMutationAction = 0
	MapMutationAction_MAP_MUTATION_DELETE MapMutationAction = 1
	MapMutationAction_MAP_MUTATION_UPDATE MapMutationAction = 2
)

var MapMutationAction_name = map[int32]string{
	0: "MAP_MUTATION_SET",
	1: "MAP_MUTATION_DELETE",
	2: "MAP_MUTATION_UPDATE",
}
var MapMutationAction_value = map[string]int32{
	"MAP_MUTATION_SET":    0,
	"MAP_MUTATION_DELETE": 1,
	"MAP_MUTATION_UPDATE": 2,
}

func (x MapMutationAction) String() string {
	return proto.EnumName(MapMutationAction_name, int32(x))
}
func (MapMutationAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type AccountRef struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	ApiKey string `protobuf:"bytes,2,opt,name=api_key,json=apiKey" json:"api_key,omitempty"`
}

func (m *AccountRef) Reset()                    { *m = AccountRef{} }
func (m *AccountRef) String() string            { return proto.CompactTextString(m) }
func (*AccountRef) ProtoMessage()               {}
func (*AccountRef) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *AccountRef) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AccountRef) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

type LogRef struct {
	Account *AccountRef `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	LogType LogType     `protobuf:"varint,2,opt,name=log_type,json=logType,enum=continusec.verifiabledatastructures.api.LogType" json:"log_type,omitempty"`
	Name    string      `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *LogRef) Reset()                    { *m = LogRef{} }
func (m *LogRef) String() string            { return proto.CompactTextString(m) }
func (*LogRef) ProtoMessage()               {}
func (*LogRef) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *LogRef) GetAccount() *AccountRef {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *LogRef) GetLogType() LogType {
	if m != nil {
		return m.LogType
	}
	return LogType_STRUCT_TYPE_LOG
}

func (m *LogRef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MapRef struct {
	Account *AccountRef `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Name    string      `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *MapRef) Reset()                    { *m = MapRef{} }
func (m *MapRef) String() string            { return proto.CompactTextString(m) }
func (*MapRef) ProtoMessage()               {}
func (*MapRef) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *MapRef) GetAccount() *AccountRef {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *MapRef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type LogCreateRequest struct {
	Log *LogRef `protobuf:"bytes,1,opt,name=log" json:"log,omitempty"`
}

func (m *LogCreateRequest) Reset()                    { *m = LogCreateRequest{} }
func (m *LogCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*LogCreateRequest) ProtoMessage()               {}
func (*LogCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *LogCreateRequest) GetLog() *LogRef {
	if m != nil {
		return m.Log
	}
	return nil
}

type LogCreateResponse struct {
}

func (m *LogCreateResponse) Reset()                    { *m = LogCreateResponse{} }
func (m *LogCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*LogCreateResponse) ProtoMessage()               {}
func (*LogCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

type LogDeleteRequest struct {
	Log *LogRef `protobuf:"bytes,1,opt,name=log" json:"log,omitempty"`
}

func (m *LogDeleteRequest) Reset()                    { *m = LogDeleteRequest{} }
func (m *LogDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*LogDeleteRequest) ProtoMessage()               {}
func (*LogDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *LogDeleteRequest) GetLog() *LogRef {
	if m != nil {
		return m.Log
	}
	return nil
}

type LogDeleteResponse struct {
}

func (m *LogDeleteResponse) Reset()                    { *m = LogDeleteResponse{} }
func (m *LogDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*LogDeleteResponse) ProtoMessage()               {}
func (*LogDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

type LogListRequest struct {
	Account *AccountRef `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *LogListRequest) Reset()                    { *m = LogListRequest{} }
func (m *LogListRequest) String() string            { return proto.CompactTextString(m) }
func (*LogListRequest) ProtoMessage()               {}
func (*LogListRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *LogListRequest) GetAccount() *AccountRef {
	if m != nil {
		return m.Account
	}
	return nil
}

type LogInfo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *LogInfo) Reset()                    { *m = LogInfo{} }
func (m *LogInfo) String() string            { return proto.CompactTextString(m) }
func (*LogInfo) ProtoMessage()               {}
func (*LogInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *LogInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type LogListResponse struct {
	Logs []*LogInfo `protobuf:"bytes,1,rep,name=logs" json:"logs,omitempty"`
}

func (m *LogListResponse) Reset()                    { *m = LogListResponse{} }
func (m *LogListResponse) String() string            { return proto.CompactTextString(m) }
func (*LogListResponse) ProtoMessage()               {}
func (*LogListResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *LogListResponse) GetLogs() []*LogInfo {
	if m != nil {
		return m.Logs
	}
	return nil
}

type MapCreateRequest struct {
	Map *MapRef `protobuf:"bytes,1,opt,name=map" json:"map,omitempty"`
}

func (m *MapCreateRequest) Reset()                    { *m = MapCreateRequest{} }
func (m *MapCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*MapCreateRequest) ProtoMessage()               {}
func (*MapCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *MapCreateRequest) GetMap() *MapRef {
	if m != nil {
		return m.Map
	}
	return nil
}

type MapCreateResponse struct {
}

func (m *MapCreateResponse) Reset()                    { *m = MapCreateResponse{} }
func (m *MapCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*MapCreateResponse) ProtoMessage()               {}
func (*MapCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

type MapDeleteRequest struct {
	Map *MapRef `protobuf:"bytes,1,opt,name=map" json:"map,omitempty"`
}

func (m *MapDeleteRequest) Reset()                    { *m = MapDeleteRequest{} }
func (m *MapDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*MapDeleteRequest) ProtoMessage()               {}
func (*MapDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *MapDeleteRequest) GetMap() *MapRef {
	if m != nil {
		return m.Map
	}
	return nil
}

type MapDeleteResponse struct {
}

func (m *MapDeleteResponse) Reset()                    { *m = MapDeleteResponse{} }
func (m *MapDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*MapDeleteResponse) ProtoMessage()               {}
func (*MapDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

type MapListRequest struct {
	Account *AccountRef `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *MapListRequest) Reset()                    { *m = MapListRequest{} }
func (m *MapListRequest) String() string            { return proto.CompactTextString(m) }
func (*MapListRequest) ProtoMessage()               {}
func (*MapListRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *MapListRequest) GetAccount() *AccountRef {
	if m != nil {
		return m.Account
	}
	return nil
}

type MapInfo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *MapInfo) Reset()                    { *m = MapInfo{} }
func (m *MapInfo) String() string            { return proto.CompactTextString(m) }
func (*MapInfo) ProtoMessage()               {}
func (*MapInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *MapInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MapListResponse struct {
	Maps []*MapInfo `protobuf:"bytes,1,rep,name=Maps" json:"Maps,omitempty"`
}

func (m *MapListResponse) Reset()                    { *m = MapListResponse{} }
func (m *MapListResponse) String() string            { return proto.CompactTextString(m) }
func (*MapListResponse) ProtoMessage()               {}
func (*MapListResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *MapListResponse) GetMaps() []*MapInfo {
	if m != nil {
		return m.Maps
	}
	return nil
}

type LogTreeHashRequest struct {
	Log      *LogRef `protobuf:"bytes,1,opt,name=log" json:"log,omitempty"`
	TreeSize int64   `protobuf:"varint,2,opt,name=tree_size,json=treeSize" json:"tree_size,omitempty"`
}

func (m *LogTreeHashRequest) Reset()                    { *m = LogTreeHashRequest{} }
func (m *LogTreeHashRequest) String() string            { return proto.CompactTextString(m) }
func (*LogTreeHashRequest) ProtoMessage()               {}
func (*LogTreeHashRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

func (m *LogTreeHashRequest) GetLog() *LogRef {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *LogTreeHashRequest) GetTreeSize() int64 {
	if m != nil {
		return m.TreeSize
	}
	return 0
}

type LogTreeHashResponse struct {
	TreeSize int64  `protobuf:"varint,1,opt,name=tree_size,json=treeSize" json:"tree_size,omitempty"`
	RootHash []byte `protobuf:"bytes,2,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
}

func (m *LogTreeHashResponse) Reset()                    { *m = LogTreeHashResponse{} }
func (m *LogTreeHashResponse) String() string            { return proto.CompactTextString(m) }
func (*LogTreeHashResponse) ProtoMessage()               {}
func (*LogTreeHashResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{18} }

func (m *LogTreeHashResponse) GetTreeSize() int64 {
	if m != nil {
		return m.TreeSize
	}
	return 0
}

func (m *LogTreeHashResponse) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

type MapTreeHashRequest struct {
	Map      *MapRef `protobuf:"bytes,1,opt,name=map" json:"map,omitempty"`
	TreeSize int64   `protobuf:"varint,2,opt,name=tree_size,json=treeSize" json:"tree_size,omitempty"`
}

func (m *MapTreeHashRequest) Reset()                    { *m = MapTreeHashRequest{} }
func (m *MapTreeHashRequest) String() string            { return proto.CompactTextString(m) }
func (*MapTreeHashRequest) ProtoMessage()               {}
func (*MapTreeHashRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{19} }

func (m *MapTreeHashRequest) GetMap() *MapRef {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *MapTreeHashRequest) GetTreeSize() int64 {
	if m != nil {
		return m.TreeSize
	}
	return 0
}

type MapTreeHashResponse struct {
	RootHash    []byte               `protobuf:"bytes,1,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	MutationLog *LogTreeHashResponse `protobuf:"bytes,2,opt,name=mutation_log,json=mutationLog" json:"mutation_log,omitempty"`
}

func (m *MapTreeHashResponse) Reset()                    { *m = MapTreeHashResponse{} }
func (m *MapTreeHashResponse) String() string            { return proto.CompactTextString(m) }
func (*MapTreeHashResponse) ProtoMessage()               {}
func (*MapTreeHashResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{20} }

func (m *MapTreeHashResponse) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

func (m *MapTreeHashResponse) GetMutationLog() *LogTreeHashResponse {
	if m != nil {
		return m.MutationLog
	}
	return nil
}

type LogInclusionProofRequest struct {
	Log      *LogRef `protobuf:"bytes,1,opt,name=log" json:"log,omitempty"`
	TreeSize int64   `protobuf:"varint,2,opt,name=tree_size,json=treeSize" json:"tree_size,omitempty"`
	// One of:
	MtlHash   []byte `protobuf:"bytes,3,opt,name=mtl_hash,json=mtlHash,proto3" json:"mtl_hash,omitempty"`
	LeafIndex int64  `protobuf:"varint,4,opt,name=leaf_index,json=leafIndex" json:"leaf_index,omitempty"`
}

func (m *LogInclusionProofRequest) Reset()                    { *m = LogInclusionProofRequest{} }
func (m *LogInclusionProofRequest) String() string            { return proto.CompactTextString(m) }
func (*LogInclusionProofRequest) ProtoMessage()               {}
func (*LogInclusionProofRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{21} }

func (m *LogInclusionProofRequest) GetLog() *LogRef {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *LogInclusionProofRequest) GetTreeSize() int64 {
	if m != nil {
		return m.TreeSize
	}
	return 0
}

func (m *LogInclusionProofRequest) GetMtlHash() []byte {
	if m != nil {
		return m.MtlHash
	}
	return nil
}

func (m *LogInclusionProofRequest) GetLeafIndex() int64 {
	if m != nil {
		return m.LeafIndex
	}
	return 0
}

type LogInclusionProofResponse struct {
	TreeSize  int64    `protobuf:"varint,1,opt,name=tree_size,json=treeSize" json:"tree_size,omitempty"`
	LeafIndex int64    `protobuf:"varint,2,opt,name=leaf_index,json=leafIndex" json:"leaf_index,omitempty"`
	AuditPath [][]byte `protobuf:"bytes,3,rep,name=audit_path,json=auditPath,proto3" json:"audit_path,omitempty"`
}

func (m *LogInclusionProofResponse) Reset()                    { *m = LogInclusionProofResponse{} }
func (m *LogInclusionProofResponse) String() string            { return proto.CompactTextString(m) }
func (*LogInclusionProofResponse) ProtoMessage()               {}
func (*LogInclusionProofResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{22} }

func (m *LogInclusionProofResponse) GetTreeSize() int64 {
	if m != nil {
		return m.TreeSize
	}
	return 0
}

func (m *LogInclusionProofResponse) GetLeafIndex() int64 {
	if m != nil {
		return m.LeafIndex
	}
	return 0
}

func (m *LogInclusionProofResponse) GetAuditPath() [][]byte {
	if m != nil {
		return m.AuditPath
	}
	return nil
}

type LogConsistencyProofRequest struct {
	Log      *LogRef `protobuf:"bytes,1,opt,name=log" json:"log,omitempty"`
	FromSize int64   `protobuf:"varint,2,opt,name=from_size,json=fromSize" json:"from_size,omitempty"`
	TreeSize int64   `protobuf:"varint,3,opt,name=tree_size,json=treeSize" json:"tree_size,omitempty"`
}

func (m *LogConsistencyProofRequest) Reset()                    { *m = LogConsistencyProofRequest{} }
func (m *LogConsistencyProofRequest) String() string            { return proto.CompactTextString(m) }
func (*LogConsistencyProofRequest) ProtoMessage()               {}
func (*LogConsistencyProofRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{23} }

func (m *LogConsistencyProofRequest) GetLog() *LogRef {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *LogConsistencyProofRequest) GetFromSize() int64 {
	if m != nil {
		return m.FromSize
	}
	return 0
}

func (m *LogConsistencyProofRequest) GetTreeSize() int64 {
	if m != nil {
		return m.TreeSize
	}
	return 0
}

type LogConsistencyProofResponse struct {
	FromSize  int64    `protobuf:"varint,1,opt,name=from_size,json=fromSize" json:"from_size,omitempty"`
	TreeSize  int64    `protobuf:"varint,2,opt,name=tree_size,json=treeSize" json:"tree_size,omitempty"`
	AuditPath [][]byte `protobuf:"bytes,3,rep,name=audit_path,json=auditPath,proto3" json:"audit_path,omitempty"`
}

func (m *LogConsistencyProofResponse) Reset()                    { *m = LogConsistencyProofResponse{} }
func (m *LogConsistencyProofResponse) String() string            { return proto.CompactTextString(m) }
func (*LogConsistencyProofResponse) ProtoMessage()               {}
func (*LogConsistencyProofResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{24} }

func (m *LogConsistencyProofResponse) GetFromSize() int64 {
	if m != nil {
		return m.FromSize
	}
	return 0
}

func (m *LogConsistencyProofResponse) GetTreeSize() int64 {
	if m != nil {
		return m.TreeSize
	}
	return 0
}

func (m *LogConsistencyProofResponse) GetAuditPath() [][]byte {
	if m != nil {
		return m.AuditPath
	}
	return nil
}

type HashableData struct {
	Format EntryFormat `protobuf:"varint,1,opt,name=format,enum=continusec.verifiabledatastructures.api.EntryFormat" json:"format,omitempty"`
	Value  []byte      `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *HashableData) Reset()                    { *m = HashableData{} }
func (m *HashableData) String() string            { return proto.CompactTextString(m) }
func (*HashableData) ProtoMessage()               {}
func (*HashableData) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{25} }

func (m *HashableData) GetFormat() EntryFormat {
	if m != nil {
		return m.Format
	}
	return EntryFormat_ENTRY_FORMAT_RAW
}

func (m *HashableData) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type LogAddEntryRequest struct {
	Log  *LogRef       `protobuf:"bytes,1,opt,name=log" json:"log,omitempty"`
	Data *HashableData `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *LogAddEntryRequest) Reset()                    { *m = LogAddEntryRequest{} }
func (m *LogAddEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*LogAddEntryRequest) ProtoMessage()               {}
func (*LogAddEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{26} }

func (m *LogAddEntryRequest) GetLog() *LogRef {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *LogAddEntryRequest) GetData() *HashableData {
	if m != nil {
		return m.Data
	}
	return nil
}

type LogAddEntryResponse struct {
	LeafHash []byte `protobuf:"bytes,1,opt,name=leaf_hash,json=leafHash,proto3" json:"leaf_hash,omitempty"`
}

func (m *LogAddEntryResponse) Reset()                    { *m = LogAddEntryResponse{} }
func (m *LogAddEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*LogAddEntryResponse) ProtoMessage()               {}
func (*LogAddEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{27} }

func (m *LogAddEntryResponse) GetLeafHash() []byte {
	if m != nil {
		return m.LeafHash
	}
	return nil
}

type MapSetValueRequest struct {
	Map          *MapRef           `protobuf:"bytes,1,opt,name=map" json:"map,omitempty"`
	Action       MapMutationAction `protobuf:"varint,2,opt,name=action,enum=continusec.verifiabledatastructures.api.MapMutationAction" json:"action,omitempty"`
	Key          []byte            `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value        *HashableData     `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	PrevLeafHash []byte            `protobuf:"bytes,5,opt,name=prev_leaf_hash,json=prevLeafHash,proto3" json:"prev_leaf_hash,omitempty"`
}

func (m *MapSetValueRequest) Reset()                    { *m = MapSetValueRequest{} }
func (m *MapSetValueRequest) String() string            { return proto.CompactTextString(m) }
func (*MapSetValueRequest) ProtoMessage()               {}
func (*MapSetValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{28} }

func (m *MapSetValueRequest) GetMap() *MapRef {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *MapSetValueRequest) GetAction() MapMutationAction {
	if m != nil {
		return m.Action
	}
	return MapMutationAction_MAP_MUTATION_SET
}

func (m *MapSetValueRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MapSetValueRequest) GetValue() *HashableData {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *MapSetValueRequest) GetPrevLeafHash() []byte {
	if m != nil {
		return m.PrevLeafHash
	}
	return nil
}

type MapSetValueResponse struct {
	LeafHash []byte `protobuf:"bytes,1,opt,name=leaf_hash,json=leafHash,proto3" json:"leaf_hash,omitempty"`
}

func (m *MapSetValueResponse) Reset()                    { *m = MapSetValueResponse{} }
func (m *MapSetValueResponse) String() string            { return proto.CompactTextString(m) }
func (*MapSetValueResponse) ProtoMessage()               {}
func (*MapSetValueResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{29} }

func (m *MapSetValueResponse) GetLeafHash() []byte {
	if m != nil {
		return m.LeafHash
	}
	return nil
}

type MapGetValueRequest struct {
	Map      *MapRef     `protobuf:"bytes,1,opt,name=map" json:"map,omitempty"`
	TreeSize int64       `protobuf:"varint,2,opt,name=tree_size,json=treeSize" json:"tree_size,omitempty"`
	Key      []byte      `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Format   EntryFormat `protobuf:"varint,4,opt,name=format,enum=continusec.verifiabledatastructures.api.EntryFormat" json:"format,omitempty"`
}

func (m *MapGetValueRequest) Reset()                    { *m = MapGetValueRequest{} }
func (m *MapGetValueRequest) String() string            { return proto.CompactTextString(m) }
func (*MapGetValueRequest) ProtoMessage()               {}
func (*MapGetValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{30} }

func (m *MapGetValueRequest) GetMap() *MapRef {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *MapGetValueRequest) GetTreeSize() int64 {
	if m != nil {
		return m.TreeSize
	}
	return 0
}

func (m *MapGetValueRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MapGetValueRequest) GetFormat() EntryFormat {
	if m != nil {
		return m.Format
	}
	return EntryFormat_ENTRY_FORMAT_RAW
}

type MapGetValueResponse struct {
	TreeSize  int64         `protobuf:"varint,1,opt,name=tree_size,json=treeSize" json:"tree_size,omitempty"`
	AuditPath [][]byte      `protobuf:"bytes,2,rep,name=audit_path,json=auditPath,proto3" json:"audit_path,omitempty"`
	Value     *HashableData `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *MapGetValueResponse) Reset()                    { *m = MapGetValueResponse{} }
func (m *MapGetValueResponse) String() string            { return proto.CompactTextString(m) }
func (*MapGetValueResponse) ProtoMessage()               {}
func (*MapGetValueResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{31} }

func (m *MapGetValueResponse) GetTreeSize() int64 {
	if m != nil {
		return m.TreeSize
	}
	return 0
}

func (m *MapGetValueResponse) GetAuditPath() [][]byte {
	if m != nil {
		return m.AuditPath
	}
	return nil
}

func (m *MapGetValueResponse) GetValue() *HashableData {
	if m != nil {
		return m.Value
	}
	return nil
}

type LogFetchEntriesRequest struct {
	Log    *LogRef     `protobuf:"bytes,1,opt,name=log" json:"log,omitempty"`
	First  int64       `protobuf:"varint,2,opt,name=first" json:"first,omitempty"`
	Last   int64       `protobuf:"varint,3,opt,name=last" json:"last,omitempty"`
	Format EntryFormat `protobuf:"varint,4,opt,name=format,enum=continusec.verifiabledatastructures.api.EntryFormat" json:"format,omitempty"`
}

func (m *LogFetchEntriesRequest) Reset()                    { *m = LogFetchEntriesRequest{} }
func (m *LogFetchEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*LogFetchEntriesRequest) ProtoMessage()               {}
func (*LogFetchEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{32} }

func (m *LogFetchEntriesRequest) GetLog() *LogRef {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *LogFetchEntriesRequest) GetFirst() int64 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *LogFetchEntriesRequest) GetLast() int64 {
	if m != nil {
		return m.Last
	}
	return 0
}

func (m *LogFetchEntriesRequest) GetFormat() EntryFormat {
	if m != nil {
		return m.Format
	}
	return EntryFormat_ENTRY_FORMAT_RAW
}

type LogFetchEntriesResponse struct {
	Values []*HashableData `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *LogFetchEntriesResponse) Reset()                    { *m = LogFetchEntriesResponse{} }
func (m *LogFetchEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*LogFetchEntriesResponse) ProtoMessage()               {}
func (*LogFetchEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{33} }

func (m *LogFetchEntriesResponse) GetValues() []*HashableData {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*AccountRef)(nil), "continusec.verifiabledatastructures.api.AccountRef")
	proto.RegisterType((*LogRef)(nil), "continusec.verifiabledatastructures.api.LogRef")
	proto.RegisterType((*MapRef)(nil), "continusec.verifiabledatastructures.api.MapRef")
	proto.RegisterType((*LogCreateRequest)(nil), "continusec.verifiabledatastructures.api.LogCreateRequest")
	proto.RegisterType((*LogCreateResponse)(nil), "continusec.verifiabledatastructures.api.LogCreateResponse")
	proto.RegisterType((*LogDeleteRequest)(nil), "continusec.verifiabledatastructures.api.LogDeleteRequest")
	proto.RegisterType((*LogDeleteResponse)(nil), "continusec.verifiabledatastructures.api.LogDeleteResponse")
	proto.RegisterType((*LogListRequest)(nil), "continusec.verifiabledatastructures.api.LogListRequest")
	proto.RegisterType((*LogInfo)(nil), "continusec.verifiabledatastructures.api.LogInfo")
	proto.RegisterType((*LogListResponse)(nil), "continusec.verifiabledatastructures.api.LogListResponse")
	proto.RegisterType((*MapCreateRequest)(nil), "continusec.verifiabledatastructures.api.MapCreateRequest")
	proto.RegisterType((*MapCreateResponse)(nil), "continusec.verifiabledatastructures.api.MapCreateResponse")
	proto.RegisterType((*MapDeleteRequest)(nil), "continusec.verifiabledatastructures.api.MapDeleteRequest")
	proto.RegisterType((*MapDeleteResponse)(nil), "continusec.verifiabledatastructures.api.MapDeleteResponse")
	proto.RegisterType((*MapListRequest)(nil), "continusec.verifiabledatastructures.api.MapListRequest")
	proto.RegisterType((*MapInfo)(nil), "continusec.verifiabledatastructures.api.MapInfo")
	proto.RegisterType((*MapListResponse)(nil), "continusec.verifiabledatastructures.api.MapListResponse")
	proto.RegisterType((*LogTreeHashRequest)(nil), "continusec.verifiabledatastructures.api.LogTreeHashRequest")
	proto.RegisterType((*LogTreeHashResponse)(nil), "continusec.verifiabledatastructures.api.LogTreeHashResponse")
	proto.RegisterType((*MapTreeHashRequest)(nil), "continusec.verifiabledatastructures.api.MapTreeHashRequest")
	proto.RegisterType((*MapTreeHashResponse)(nil), "continusec.verifiabledatastructures.api.MapTreeHashResponse")
	proto.RegisterType((*LogInclusionProofRequest)(nil), "continusec.verifiabledatastructures.api.LogInclusionProofRequest")
	proto.RegisterType((*LogInclusionProofResponse)(nil), "continusec.verifiabledatastructures.api.LogInclusionProofResponse")
	proto.RegisterType((*LogConsistencyProofRequest)(nil), "continusec.verifiabledatastructures.api.LogConsistencyProofRequest")
	proto.RegisterType((*LogConsistencyProofResponse)(nil), "continusec.verifiabledatastructures.api.LogConsistencyProofResponse")
	proto.RegisterType((*HashableData)(nil), "continusec.verifiabledatastructures.api.HashableData")
	proto.RegisterType((*LogAddEntryRequest)(nil), "continusec.verifiabledatastructures.api.LogAddEntryRequest")
	proto.RegisterType((*LogAddEntryResponse)(nil), "continusec.verifiabledatastructures.api.LogAddEntryResponse")
	proto.RegisterType((*MapSetValueRequest)(nil), "continusec.verifiabledatastructures.api.MapSetValueRequest")
	proto.RegisterType((*MapSetValueResponse)(nil), "continusec.verifiabledatastructures.api.MapSetValueResponse")
	proto.RegisterType((*MapGetValueRequest)(nil), "continusec.verifiabledatastructures.api.MapGetValueRequest")
	proto.RegisterType((*MapGetValueResponse)(nil), "continusec.verifiabledatastructures.api.MapGetValueResponse")
	proto.RegisterType((*LogFetchEntriesRequest)(nil), "continusec.verifiabledatastructures.api.LogFetchEntriesRequest")
	proto.RegisterType((*LogFetchEntriesResponse)(nil), "continusec.verifiabledatastructures.api.LogFetchEntriesResponse")
	proto.RegisterEnum("continusec.verifiabledatastructures.api.LogType", LogType_name, LogType_value)
	proto.RegisterEnum("continusec.verifiabledatastructures.api.EntryFormat", EntryFormat_name, EntryFormat_value)
	proto.RegisterEnum("continusec.verifiabledatastructures.api.MapMutationAction", MapMutationAction_name, MapMutationAction_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VerifiableDataStructuresService service

type VerifiableDataStructuresServiceClient interface {
	LogCreate(ctx context.Context, in *LogCreateRequest, opts ...grpc.CallOption) (*LogCreateResponse, error)
	LogDelete(ctx context.Context, in *LogDeleteRequest, opts ...grpc.CallOption) (*LogDeleteResponse, error)
	LogList(ctx context.Context, in *LogListRequest, opts ...grpc.CallOption) (*LogListResponse, error)
	LogAddEntry(ctx context.Context, in *LogAddEntryRequest, opts ...grpc.CallOption) (*LogAddEntryResponse, error)
	LogFetchEntries(ctx context.Context, in *LogFetchEntriesRequest, opts ...grpc.CallOption) (*LogFetchEntriesResponse, error)
	LogTreeHash(ctx context.Context, in *LogTreeHashRequest, opts ...grpc.CallOption) (*LogTreeHashResponse, error)
	LogInclusionProof(ctx context.Context, in *LogInclusionProofRequest, opts ...grpc.CallOption) (*LogInclusionProofResponse, error)
	LogConsistencyProof(ctx context.Context, in *LogConsistencyProofRequest, opts ...grpc.CallOption) (*LogConsistencyProofResponse, error)
	MapCreate(ctx context.Context, in *MapCreateRequest, opts ...grpc.CallOption) (*MapCreateResponse, error)
	MapDelete(ctx context.Context, in *MapDeleteRequest, opts ...grpc.CallOption) (*MapDeleteResponse, error)
	MapList(ctx context.Context, in *MapListRequest, opts ...grpc.CallOption) (*MapListResponse, error)
	MapSetValue(ctx context.Context, in *MapSetValueRequest, opts ...grpc.CallOption) (*MapSetValueResponse, error)
	MapGetValue(ctx context.Context, in *MapGetValueRequest, opts ...grpc.CallOption) (*MapGetValueResponse, error)
	MapTreeHash(ctx context.Context, in *MapTreeHashRequest, opts ...grpc.CallOption) (*MapTreeHashResponse, error)
}

type verifiableDataStructuresServiceClient struct {
	cc *grpc.ClientConn
}

func NewVerifiableDataStructuresServiceClient(cc *grpc.ClientConn) VerifiableDataStructuresServiceClient {
	return &verifiableDataStructuresServiceClient{cc}
}

func (c *verifiableDataStructuresServiceClient) LogCreate(ctx context.Context, in *LogCreateRequest, opts ...grpc.CallOption) (*LogCreateResponse, error) {
	out := new(LogCreateResponse)
	err := grpc.Invoke(ctx, "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/LogCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableDataStructuresServiceClient) LogDelete(ctx context.Context, in *LogDeleteRequest, opts ...grpc.CallOption) (*LogDeleteResponse, error) {
	out := new(LogDeleteResponse)
	err := grpc.Invoke(ctx, "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/LogDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableDataStructuresServiceClient) LogList(ctx context.Context, in *LogListRequest, opts ...grpc.CallOption) (*LogListResponse, error) {
	out := new(LogListResponse)
	err := grpc.Invoke(ctx, "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/LogList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableDataStructuresServiceClient) LogAddEntry(ctx context.Context, in *LogAddEntryRequest, opts ...grpc.CallOption) (*LogAddEntryResponse, error) {
	out := new(LogAddEntryResponse)
	err := grpc.Invoke(ctx, "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/LogAddEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableDataStructuresServiceClient) LogFetchEntries(ctx context.Context, in *LogFetchEntriesRequest, opts ...grpc.CallOption) (*LogFetchEntriesResponse, error) {
	out := new(LogFetchEntriesResponse)
	err := grpc.Invoke(ctx, "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/LogFetchEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableDataStructuresServiceClient) LogTreeHash(ctx context.Context, in *LogTreeHashRequest, opts ...grpc.CallOption) (*LogTreeHashResponse, error) {
	out := new(LogTreeHashResponse)
	err := grpc.Invoke(ctx, "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/LogTreeHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableDataStructuresServiceClient) LogInclusionProof(ctx context.Context, in *LogInclusionProofRequest, opts ...grpc.CallOption) (*LogInclusionProofResponse, error) {
	out := new(LogInclusionProofResponse)
	err := grpc.Invoke(ctx, "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/LogInclusionProof", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableDataStructuresServiceClient) LogConsistencyProof(ctx context.Context, in *LogConsistencyProofRequest, opts ...grpc.CallOption) (*LogConsistencyProofResponse, error) {
	out := new(LogConsistencyProofResponse)
	err := grpc.Invoke(ctx, "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/LogConsistencyProof", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableDataStructuresServiceClient) MapCreate(ctx context.Context, in *MapCreateRequest, opts ...grpc.CallOption) (*MapCreateResponse, error) {
	out := new(MapCreateResponse)
	err := grpc.Invoke(ctx, "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/MapCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableDataStructuresServiceClient) MapDelete(ctx context.Context, in *MapDeleteRequest, opts ...grpc.CallOption) (*MapDeleteResponse, error) {
	out := new(MapDeleteResponse)
	err := grpc.Invoke(ctx, "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/MapDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableDataStructuresServiceClient) MapList(ctx context.Context, in *MapListRequest, opts ...grpc.CallOption) (*MapListResponse, error) {
	out := new(MapListResponse)
	err := grpc.Invoke(ctx, "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/MapList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableDataStructuresServiceClient) MapSetValue(ctx context.Context, in *MapSetValueRequest, opts ...grpc.CallOption) (*MapSetValueResponse, error) {
	out := new(MapSetValueResponse)
	err := grpc.Invoke(ctx, "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/MapSetValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableDataStructuresServiceClient) MapGetValue(ctx context.Context, in *MapGetValueRequest, opts ...grpc.CallOption) (*MapGetValueResponse, error) {
	out := new(MapGetValueResponse)
	err := grpc.Invoke(ctx, "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/MapGetValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableDataStructuresServiceClient) MapTreeHash(ctx context.Context, in *MapTreeHashRequest, opts ...grpc.CallOption) (*MapTreeHashResponse, error) {
	out := new(MapTreeHashResponse)
	err := grpc.Invoke(ctx, "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/MapTreeHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VerifiableDataStructuresService service

type VerifiableDataStructuresServiceServer interface {
	LogCreate(context.Context, *LogCreateRequest) (*LogCreateResponse, error)
	LogDelete(context.Context, *LogDeleteRequest) (*LogDeleteResponse, error)
	LogList(context.Context, *LogListRequest) (*LogListResponse, error)
	LogAddEntry(context.Context, *LogAddEntryRequest) (*LogAddEntryResponse, error)
	LogFetchEntries(context.Context, *LogFetchEntriesRequest) (*LogFetchEntriesResponse, error)
	LogTreeHash(context.Context, *LogTreeHashRequest) (*LogTreeHashResponse, error)
	LogInclusionProof(context.Context, *LogInclusionProofRequest) (*LogInclusionProofResponse, error)
	LogConsistencyProof(context.Context, *LogConsistencyProofRequest) (*LogConsistencyProofResponse, error)
	MapCreate(context.Context, *MapCreateRequest) (*MapCreateResponse, error)
	MapDelete(context.Context, *MapDeleteRequest) (*MapDeleteResponse, error)
	MapList(context.Context, *MapListRequest) (*MapListResponse, error)
	MapSetValue(context.Context, *MapSetValueRequest) (*MapSetValueResponse, error)
	MapGetValue(context.Context, *MapGetValueRequest) (*MapGetValueResponse, error)
	MapTreeHash(context.Context, *MapTreeHashRequest) (*MapTreeHashResponse, error)
}

func RegisterVerifiableDataStructuresServiceServer(s *grpc.Server, srv VerifiableDataStructuresServiceServer) {
	s.RegisterService(&_VerifiableDataStructuresService_serviceDesc, srv)
}

func _VerifiableDataStructuresService_LogCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).LogCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/LogCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).LogCreate(ctx, req.(*LogCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableDataStructuresService_LogDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).LogDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/LogDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).LogDelete(ctx, req.(*LogDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableDataStructuresService_LogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).LogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/LogList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).LogList(ctx, req.(*LogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableDataStructuresService_LogAddEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogAddEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).LogAddEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/LogAddEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).LogAddEntry(ctx, req.(*LogAddEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableDataStructuresService_LogFetchEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogFetchEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).LogFetchEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/LogFetchEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).LogFetchEntries(ctx, req.(*LogFetchEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableDataStructuresService_LogTreeHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogTreeHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).LogTreeHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/LogTreeHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).LogTreeHash(ctx, req.(*LogTreeHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableDataStructuresService_LogInclusionProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogInclusionProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).LogInclusionProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/LogInclusionProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).LogInclusionProof(ctx, req.(*LogInclusionProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableDataStructuresService_LogConsistencyProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogConsistencyProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).LogConsistencyProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/LogConsistencyProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).LogConsistencyProof(ctx, req.(*LogConsistencyProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableDataStructuresService_MapCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).MapCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/MapCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).MapCreate(ctx, req.(*MapCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableDataStructuresService_MapDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).MapDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/MapDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).MapDelete(ctx, req.(*MapDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableDataStructuresService_MapList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).MapList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/MapList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).MapList(ctx, req.(*MapListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableDataStructuresService_MapSetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapSetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).MapSetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/MapSetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).MapSetValue(ctx, req.(*MapSetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableDataStructuresService_MapGetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapGetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).MapGetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/MapGetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).MapGetValue(ctx, req.(*MapGetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableDataStructuresService_MapTreeHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapTreeHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableDataStructuresServiceServer).MapTreeHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/continusec.verifiabledatastructures.api.VerifiableDataStructuresService/MapTreeHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableDataStructuresServiceServer).MapTreeHash(ctx, req.(*MapTreeHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VerifiableDataStructuresService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "continusec.verifiabledatastructures.api.VerifiableDataStructuresService",
	HandlerType: (*VerifiableDataStructuresServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogCreate",
			Handler:    _VerifiableDataStructuresService_LogCreate_Handler,
		},
		{
			MethodName: "LogDelete",
			Handler:    _VerifiableDataStructuresService_LogDelete_Handler,
		},
		{
			MethodName: "LogList",
			Handler:    _VerifiableDataStructuresService_LogList_Handler,
		},
		{
			MethodName: "LogAddEntry",
			Handler:    _VerifiableDataStructuresService_LogAddEntry_Handler,
		},
		{
			MethodName: "LogFetchEntries",
			Handler:    _VerifiableDataStructuresService_LogFetchEntries_Handler,
		},
		{
			MethodName: "LogTreeHash",
			Handler:    _VerifiableDataStructuresService_LogTreeHash_Handler,
		},
		{
			MethodName: "LogInclusionProof",
			Handler:    _VerifiableDataStructuresService_LogInclusionProof_Handler,
		},
		{
			MethodName: "LogConsistencyProof",
			Handler:    _VerifiableDataStructuresService_LogConsistencyProof_Handler,
		},
		{
			MethodName: "MapCreate",
			Handler:    _VerifiableDataStructuresService_MapCreate_Handler,
		},
		{
			MethodName: "MapDelete",
			Handler:    _VerifiableDataStructuresService_MapDelete_Handler,
		},
		{
			MethodName: "MapList",
			Handler:    _VerifiableDataStructuresService_MapList_Handler,
		},
		{
			MethodName: "MapSetValue",
			Handler:    _VerifiableDataStructuresService_MapSetValue_Handler,
		},
		{
			MethodName: "MapGetValue",
			Handler:    _VerifiableDataStructuresService_MapGetValue_Handler,
		},
		{
			MethodName: "MapTreeHash",
			Handler:    _VerifiableDataStructuresService_MapTreeHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 1319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x58, 0xcf, 0x6e, 0xdb, 0x46,
	0x13, 0x37, 0x29, 0x45, 0xb6, 0xc7, 0x86, 0xa3, 0xac, 0x93, 0x2f, 0x8a, 0xf2, 0x05, 0x0d, 0x88,
	0x02, 0x0d, 0x72, 0x70, 0x0b, 0xa7, 0x41, 0xdb, 0x34, 0x40, 0xab, 0x44, 0x8a, 0xe3, 0x86, 0x8c,
	0x0d, 0x8a, 0x4e, 0x90, 0xf4, 0x40, 0xac, 0xa5, 0x95, 0x4c, 0x84, 0xe2, 0xb2, 0xe4, 0xca, 0xa8,
	0x72, 0xe8, 0xa9, 0xa7, 0x5e, 0x0b, 0x14, 0x28, 0x50, 0xf4, 0x90, 0x27, 0xe8, 0xa1, 0x87, 0xbe,
	0x47, 0x7b, 0xeb, 0xcb, 0x14, 0xbb, 0x24, 0xc5, 0x3f, 0x52, 0x05, 0xad, 0x24, 0xf7, 0x46, 0x0d,
	0x35, 0xbf, 0x99, 0xf9, 0xcd, 0xce, 0x70, 0x66, 0x61, 0x13, 0xfb, 0xce, 0x9e, 0x1f, 0x50, 0x46,
	0xd1, 0x07, 0x1d, 0xea, 0x31, 0xc7, 0x1b, 0x86, 0xa4, 0xb3, 0x77, 0x4e, 0x02, 0xa7, 0xe7, 0xe0,
	0x53, 0x97, 0x74, 0x31, 0xc3, 0x21, 0x0b, 0x86, 0x1d, 0x36, 0x0c, 0x48, 0xb8, 0x87, 0x7d, 0x47,
	0xbb, 0x0f, 0xd0, 0xe8, 0x74, 0xe8, 0xd0, 0x63, 0x26, 0xe9, 0xa1, 0x1d, 0x50, 0x9d, 0x6e, 0x4d,
	0xb9, 0xad, 0xdc, 0xd9, 0x34, 0x55, 0xa7, 0x8b, 0xae, 0xc3, 0x3a, 0xf6, 0x1d, 0xfb, 0x0d, 0x19,
	0xd5, 0x54, 0x21, 0xac, 0x60, 0xdf, 0x79, 0x46, 0x46, 0xda, 0x1f, 0x0a, 0x54, 0x74, 0xda, 0xe7,
	0x3a, 0x06, 0xac, 0xe3, 0x08, 0x41, 0x28, 0x6e, 0xed, 0xdf, 0xdb, 0x9b, 0xd3, 0xf8, 0x5e, 0x6a,
	0xd9, 0x4c, 0x30, 0xd0, 0x33, 0xd8, 0x70, 0x69, 0xdf, 0x66, 0x23, 0x9f, 0x08, 0x9b, 0x3b, 0xfb,
	0x1f, 0xcd, 0x8d, 0xa7, 0xd3, 0xbe, 0x35, 0xf2, 0x89, 0xb9, 0xee, 0x46, 0x0f, 0x08, 0x41, 0xd9,
	0xc3, 0x03, 0x52, 0x2b, 0x09, 0xe7, 0xc5, 0xb3, 0xf6, 0x06, 0x2a, 0x06, 0xf6, 0x2f, 0xc0, 0xf3,
	0x69, 0xc6, 0x4e, 0xa0, 0xaa, 0xd3, 0xfe, 0xe3, 0x80, 0x60, 0x46, 0x4c, 0xf2, 0xcd, 0x90, 0x84,
	0x0c, 0x35, 0xa0, 0xe4, 0xd2, 0x7e, 0x6c, 0xf2, 0x43, 0x99, 0xe0, 0xb8, 0x39, 0xae, 0xab, 0xed,
	0xc2, 0x95, 0x0c, 0x6c, 0xe8, 0x53, 0x2f, 0x4c, 0x6c, 0x35, 0x89, 0x4b, 0x2e, 0xc0, 0x56, 0x02,
	0x1b, 0xdb, 0xb2, 0x61, 0x47, 0xa7, 0x7d, 0xdd, 0x09, 0x59, 0x62, 0x69, 0xb5, 0x64, 0x6a, 0xb7,
	0x60, 0x5d, 0xa7, 0xfd, 0x43, 0xaf, 0x47, 0xc7, 0xbc, 0x2a, 0x19, 0x5e, 0x5f, 0xc2, 0xe5, 0xb1,
	0xfd, 0xc8, 0x25, 0xd4, 0x84, 0xb2, 0x4b, 0xfb, 0x61, 0x4d, 0xb9, 0x5d, 0xba, 0xb3, 0x25, 0x77,
	0x68, 0xb8, 0x19, 0x53, 0x68, 0x73, 0x12, 0x0d, 0xec, 0x4f, 0x24, 0x6c, 0x80, 0x7d, 0x69, 0x12,
	0xa3, 0x53, 0x66, 0x72, 0x5d, 0x4e, 0x62, 0x06, 0x36, 0x4d, 0x98, 0x81, 0xfd, 0x89, 0x84, 0xad,
	0xc6, 0xd6, 0x64, 0xc2, 0x0c, 0xec, 0x5f, 0x6c, 0xc2, 0x0c, 0xec, 0xcf, 0x4a, 0xd8, 0xd8, 0x7e,
	0x9a, 0x30, 0x03, 0xfb, 0xf2, 0x09, 0x8b, 0xcd, 0x98, 0x42, 0x5b, 0x63, 0x80, 0x78, 0xd9, 0x07,
	0x84, 0x3c, 0xc5, 0xe1, 0xd9, 0xea, 0xce, 0x3d, 0xba, 0x09, 0x9b, 0x2c, 0x20, 0xc4, 0x0e, 0x9d,
	0xb7, 0x51, 0x27, 0x2a, 0x99, 0x1b, 0x5c, 0xd0, 0x76, 0xde, 0x12, 0xed, 0x08, 0x76, 0x73, 0x56,
	0xe3, 0x90, 0x72, 0x3a, 0x4a, 0x5e, 0x87, 0xbf, 0x0c, 0x28, 0x65, 0xf6, 0x19, 0x0e, 0xcf, 0x04,
	0xe0, 0xb6, 0xb9, 0xc1, 0x05, 0x1c, 0x81, 0x87, 0x61, 0x60, 0x7f, 0x4a, 0x18, 0x4b, 0x9e, 0x86,
	0xd9, 0x61, 0xfc, 0xa8, 0xc0, 0x6e, 0xce, 0x6c, 0x1a, 0x47, 0xea, 0xaa, 0x92, 0x77, 0x15, 0xd9,
	0xb0, 0x3d, 0x18, 0x32, 0xcc, 0x1c, 0xea, 0xd9, 0x9c, 0x64, 0x55, 0x78, 0xf7, 0x50, 0xaa, 0x4b,
	0x17, 0x0c, 0x9a, 0x5b, 0x09, 0xa2, 0x4e, 0xfb, 0xda, 0xef, 0x0a, 0xd4, 0x44, 0x55, 0x76, 0xdc,
	0x61, 0xe8, 0x50, 0xef, 0x38, 0xa0, 0xb4, 0xf7, 0x1f, 0x65, 0x16, 0xdd, 0x80, 0x8d, 0x01, 0x73,
	0xa3, 0xc8, 0x4b, 0x22, 0xf2, 0xf5, 0x01, 0x73, 0x45, 0xe0, 0xb7, 0x00, 0x5c, 0x82, 0x7b, 0xb6,
	0xe3, 0x75, 0xc9, 0xb7, 0xb5, 0xb2, 0x50, 0xdc, 0xe4, 0x92, 0x43, 0x2e, 0xd0, 0xce, 0xe1, 0xc6,
	0x14, 0xaf, 0xe7, 0x39, 0x19, 0x79, 0x60, 0xb5, 0x00, 0xcc, 0x5f, 0xe3, 0x61, 0xd7, 0x61, 0xb6,
	0x8f, 0x19, 0x77, 0xaa, 0x74, 0x67, 0xdb, 0xdc, 0x14, 0x92, 0x63, 0xcc, 0xce, 0xb4, 0x9f, 0x15,
	0xa8, 0xf3, 0xaf, 0x01, 0xf5, 0x42, 0x27, 0x64, 0xc4, 0xeb, 0x8c, 0x2e, 0x80, 0xb0, 0x5e, 0x40,
	0x07, 0x39, 0xc2, 0xb8, 0x20, 0x39, 0xd6, 0x69, 0x64, 0xa5, 0xc2, 0x01, 0x3b, 0x87, 0x9b, 0x53,
	0x5d, 0x4b, 0x59, 0x49, 0x81, 0x95, 0x59, 0xc0, 0xea, 0x24, 0x65, 0xb3, 0x38, 0x09, 0x60, 0x9b,
	0xa7, 0x8c, 0xc7, 0xd6, 0xc4, 0x0c, 0x23, 0x1d, 0x2a, 0x3d, 0x1a, 0x0c, 0x70, 0xd4, 0xeb, 0x76,
	0xf6, 0x3f, 0x9e, 0x9b, 0x87, 0x96, 0xc7, 0x82, 0xd1, 0x13, 0xa1, 0x6b, 0xc6, 0x18, 0xe8, 0x2a,
	0x5c, 0x3a, 0xc7, 0xee, 0x90, 0xc4, 0x55, 0x1c, 0xfd, 0xd0, 0xde, 0x29, 0xa2, 0x15, 0x35, 0xba,
	0x5d, 0xa1, 0xb3, 0x42, 0xfe, 0x0f, 0xa1, 0xcc, 0xff, 0x11, 0x57, 0xda, 0xfd, 0xb9, 0x31, 0xb2,
	0x14, 0x98, 0x02, 0x42, 0xdb, 0x17, 0x8d, 0x2b, 0xf5, 0x31, 0x4d, 0x84, 0x38, 0x81, 0xd9, 0x82,
	0xe7, 0x02, 0xd1, 0x9b, 0x7e, 0x53, 0x45, 0x73, 0x6a, 0x13, 0xf6, 0x82, 0x07, 0xba, 0xc2, 0xe6,
	0x64, 0x42, 0x05, 0x77, 0x78, 0xd9, 0xc7, 0xa3, 0xde, 0x03, 0x19, 0x14, 0x23, 0x6e, 0x19, 0x0d,
	0x81, 0x60, 0xc6, 0x48, 0xa8, 0x0a, 0x25, 0x3e, 0xaf, 0x46, 0xb5, 0xcb, 0x1f, 0xd1, 0xb3, 0x24,
	0x5d, 0xe5, 0x65, 0xf8, 0x8b, 0x30, 0xd0, 0xfb, 0xb0, 0xe3, 0x07, 0xe4, 0xdc, 0x4e, 0xe9, 0xba,
	0x24, 0x2c, 0x6d, 0x73, 0xa9, 0x9e, 0x50, 0xb6, 0x2f, 0xfa, 0x6a, 0xca, 0xd8, 0x3c, 0x34, 0xff,
	0xa5, 0x08, 0x9a, 0x0f, 0x56, 0x4f, 0xf3, 0xcc, 0x4a, 0x9a, 0xe4, 0x2b, 0x2d, 0x96, 0xf2, 0xf2,
	0xc5, 0xa2, 0xfd, 0x1a, 0x7d, 0x63, 0x0e, 0xa6, 0x70, 0x31, 0xb3, 0x23, 0x66, 0xca, 0x5b, 0x2d,
	0x94, 0x77, 0x9a, 0xd1, 0xd2, 0xf2, 0x19, 0xd5, 0xfe, 0x54, 0xe0, 0x7f, 0x3a, 0xed, 0x3f, 0x21,
	0xac, 0x73, 0xc6, 0x03, 0x70, 0x48, 0xb8, 0xc2, 0xda, 0xbd, 0x0a, 0x97, 0x7a, 0x4e, 0x10, 0xb2,
	0x98, 0xf7, 0xe8, 0x07, 0x1f, 0x91, 0x5c, 0x1c, 0xb2, 0xb8, 0x5f, 0x8a, 0xe7, 0x15, 0xd3, 0x7e,
	0x06, 0xd7, 0x27, 0x82, 0x8a, 0x99, 0x37, 0xa0, 0x22, 0x22, 0x4f, 0x46, 0xaf, 0x05, 0xe9, 0x8b,
	0x41, 0xee, 0xbe, 0x16, 0xa3, 0xba, 0xd8, 0xb7, 0x76, 0xe1, 0x72, 0xdb, 0x32, 0x4f, 0x1e, 0x5b,
	0xb6, 0xf5, 0xea, 0xb8, 0x65, 0xeb, 0x47, 0x07, 0xd5, 0x35, 0xf4, 0x7f, 0xa8, 0x65, 0x85, 0xc6,
	0x89, 0xd5, 0xb0, 0x0e, 0x8f, 0x9e, 0x8b, 0xb7, 0x4a, 0xf1, 0xad, 0x65, 0xb6, 0x5a, 0x4f, 0x5b,
	0x8d, 0xa6, 0x78, 0xab, 0xde, 0x3d, 0x81, 0xad, 0x4c, 0x70, 0xe8, 0x2a, 0x54, 0x5b, 0xcf, 0x2d,
	0xf3, 0x95, 0xfd, 0xe4, 0xc8, 0x34, 0x1a, 0x96, 0x6d, 0x36, 0x5e, 0x56, 0xd7, 0xd0, 0x35, 0xb8,
	0x92, 0x93, 0x7e, 0xd5, 0x3e, 0x7a, 0x5e, 0x55, 0xd0, 0x0d, 0xb8, 0x96, 0x13, 0x27, 0x86, 0xab,
	0xea, 0xdd, 0xaf, 0xc5, 0x88, 0x9c, 0x6f, 0x20, 0x1c, 0xdc, 0x68, 0x1c, 0xa7, 0xfe, 0xb5, 0x5b,
	0x56, 0x75, 0x0d, 0x5d, 0x87, 0xdd, 0x9c, 0xb4, 0xd9, 0xd2, 0x5b, 0x56, 0xab, 0xaa, 0x4c, 0xbc,
	0x38, 0x39, 0x6e, 0x36, 0xac, 0x56, 0x55, 0xdd, 0xff, 0xfb, 0x32, 0xbc, 0xf7, 0x62, 0xcc, 0x22,
	0xa7, 0xaa, 0x3d, 0x66, 0xb1, 0x4d, 0x82, 0x73, 0xa7, 0x43, 0xd0, 0xf7, 0x0a, 0x6c, 0x8e, 0x37,
	0x38, 0xf4, 0x99, 0xcc, 0xc9, 0xca, 0xed, 0x26, 0xf5, 0x07, 0x8b, 0xa8, 0xc6, 0x3b, 0xc1, 0x5a,
	0xe2, 0x46, 0xb4, 0x2b, 0xc8, 0xb9, 0x91, 0x5b, 0x5b, 0xe4, 0xdc, 0x28, 0xac, 0x26, 0x6b, 0xe8,
	0x3b, 0x71, 0x82, 0xf8, 0x72, 0x80, 0x3e, 0x91, 0x01, 0xca, 0xac, 0x33, 0xf5, 0x4f, 0xe5, 0x15,
	0xc7, 0xf6, 0x7f, 0x50, 0x60, 0x2b, 0xf3, 0x55, 0x44, 0x9f, 0xcb, 0x60, 0x15, 0xbe, 0xf7, 0xf5,
	0x87, 0x8b, 0x29, 0x8f, 0x9d, 0xf9, 0x49, 0x11, 0xbb, 0x6d, 0xb6, 0x72, 0xd1, 0x17, 0x32, 0x98,
	0x53, 0x1a, 0x59, 0xfd, 0xcb, 0xc5, 0x01, 0x8a, 0x2c, 0x25, 0xb3, 0xbb, 0x1c, 0x4b, 0x85, 0xcd,
	0xa6, 0xbe, 0xd4, 0xba, 0xa0, 0xad, 0xa1, 0x5f, 0x14, 0x71, 0x2d, 0x91, 0x9f, 0xb6, 0x51, 0x43,
	0x6e, 0xeb, 0x9f, 0xb2, 0x5f, 0xd4, 0x1f, 0x2d, 0x03, 0x31, 0x76, 0xef, 0x9d, 0x22, 0xe6, 0xac,
	0xe2, 0xe0, 0x8b, 0x1e, 0x4b, 0x95, 0xeb, 0xf4, 0x89, 0xbe, 0xde, 0x5c, 0x0e, 0x24, 0x57, 0xfd,
	0xe3, 0x5b, 0x09, 0x89, 0xea, 0x2f, 0x5e, 0x90, 0xd4, 0x1f, 0x2c, 0xa2, 0x5a, 0x74, 0x43, 0xba,
	0x09, 0x15, 0xef, 0x4e, 0xe4, 0xdc, 0x98, 0xd6, 0x84, 0xe2, 0x1b, 0x0a, 0x89, 0x26, 0x94, 0xbf,
	0x53, 0x91, 0x68, 0x42, 0x85, 0xcb, 0x90, 0xb8, 0xbc, 0x32, 0x33, 0xa3, 0x44, 0x79, 0x4d, 0xce,
	0xe6, 0x12, 0xe5, 0x35, 0x65, 0x4c, 0x4d, 0x9d, 0x39, 0x58, 0xc8, 0x99, 0x83, 0x65, 0x9c, 0x39,
	0xf8, 0x57, 0x67, 0x16, 0x68, 0x3c, 0x93, 0x57, 0x2a, 0x72, 0xce, 0x4c, 0x36, 0x9e, 0x47, 0xe5,
	0xd7, 0xaa, 0x7f, 0x7a, 0x5a, 0x11, 0xd7, 0xec, 0xf7, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x1f,
	0x32, 0xf4, 0x4f, 0x73, 0x17, 0x00, 0x00,
}
