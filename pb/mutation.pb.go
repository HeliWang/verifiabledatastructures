// Code generated by protoc-gen-go.
// source: mutation.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MutationType int32

const (
	MutationType_MUT_UNKNOWN     MutationType = 0
	MutationType_MUT_LOG_CREATE  MutationType = 1
	MutationType_MUT_LOG_DESTROY MutationType = 2
	MutationType_MUT_LOG_ADD     MutationType = 3
	MutationType_MUT_MAP_CREATE  MutationType = 4
	MutationType_MUT_MAP_DESTROY MutationType = 5
)

var MutationType_name = map[int32]string{
	0: "MUT_UNKNOWN",
	1: "MUT_LOG_CREATE",
	2: "MUT_LOG_DESTROY",
	3: "MUT_LOG_ADD",
	4: "MUT_MAP_CREATE",
	5: "MUT_MAP_DESTROY",
}
var MutationType_value = map[string]int32{
	"MUT_UNKNOWN":     0,
	"MUT_LOG_CREATE":  1,
	"MUT_LOG_DESTROY": 2,
	"MUT_LOG_ADD":     3,
	"MUT_MAP_CREATE":  4,
	"MUT_MAP_DESTROY": 5,
}

func (x MutationType) String() string {
	return proto.EnumName(MutationType_name, int32(x))
}
func (MutationType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type Mutation struct {
	Operation MutationType `protobuf:"varint,1,opt,name=operation,enum=continusec.vds.MutationType" json:"operation,omitempty"`
	Account   string       `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	Name      string       `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Mtl       []byte       `protobuf:"bytes,4,opt,name=mtl,proto3" json:"mtl,omitempty"`
	Value     []byte       `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Extra     []byte       `protobuf:"bytes,6,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (m *Mutation) Reset()                    { *m = Mutation{} }
func (m *Mutation) String() string            { return proto.CompactTextString(m) }
func (*Mutation) ProtoMessage()               {}
func (*Mutation) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Mutation) GetOperation() MutationType {
	if m != nil {
		return m.Operation
	}
	return MutationType_MUT_UNKNOWN
}

func (m *Mutation) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Mutation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Mutation) GetMtl() []byte {
	if m != nil {
		return m.Mtl
	}
	return nil
}

func (m *Mutation) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Mutation) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type LogTreeHash struct {
	Size int64  `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *LogTreeHash) Reset()                    { *m = LogTreeHash{} }
func (m *LogTreeHash) String() string            { return proto.CompactTextString(m) }
func (*LogTreeHash) ProtoMessage()               {}
func (*LogTreeHash) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *LogTreeHash) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *LogTreeHash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type LeafNode struct {
	Mtl []byte `protobuf:"bytes,1,opt,name=mtl,proto3" json:"mtl,omitempty"`
}

func (m *LeafNode) Reset()                    { *m = LeafNode{} }
func (m *LeafNode) String() string            { return proto.CompactTextString(m) }
func (*LeafNode) ProtoMessage()               {}
func (*LeafNode) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *LeafNode) GetMtl() []byte {
	if m != nil {
		return m.Mtl
	}
	return nil
}

type TreeNode struct {
	Mth []byte `protobuf:"bytes,1,opt,name=mth,proto3" json:"mth,omitempty"`
}

func (m *TreeNode) Reset()                    { *m = TreeNode{} }
func (m *TreeNode) String() string            { return proto.CompactTextString(m) }
func (*TreeNode) ProtoMessage()               {}
func (*TreeNode) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *TreeNode) GetMth() []byte {
	if m != nil {
		return m.Mth
	}
	return nil
}

func init() {
	proto.RegisterType((*Mutation)(nil), "continusec.vds.Mutation")
	proto.RegisterType((*LogTreeHash)(nil), "continusec.vds.LogTreeHash")
	proto.RegisterType((*LeafNode)(nil), "continusec.vds.LeafNode")
	proto.RegisterType((*TreeNode)(nil), "continusec.vds.TreeNode")
	proto.RegisterEnum("continusec.vds.MutationType", MutationType_name, MutationType_value)
}

func init() { proto.RegisterFile("mutation.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x91, 0xc1, 0x4f, 0xc2, 0x30,
	0x18, 0xc5, 0x2d, 0x1b, 0x08, 0x1f, 0x64, 0x2c, 0xd5, 0x43, 0x0f, 0x1c, 0x08, 0x27, 0xe2, 0x61,
	0x07, 0x8d, 0x17, 0x6f, 0x28, 0x44, 0x13, 0x61, 0x33, 0x75, 0xc4, 0xe8, 0x85, 0x94, 0x51, 0xdd,
	0x12, 0xb6, 0x2e, 0x5b, 0x47, 0xd4, 0xa3, 0x7f, 0x92, 0x7f, 0xa1, 0x69, 0xb1, 0x4c, 0x6f, 0xef,
	0xfd, 0xbe, 0xef, 0xb5, 0xaf, 0x29, 0x38, 0x69, 0x25, 0x99, 0x4c, 0x44, 0xe6, 0xe5, 0x85, 0x90,
	0x02, 0x3b, 0x91, 0xc8, 0x64, 0x92, 0x55, 0x25, 0x8f, 0xbc, 0xdd, 0xa6, 0x1c, 0x7d, 0x23, 0x68,
	0x2f, 0x7e, 0x57, 0xf0, 0x15, 0x74, 0x44, 0xce, 0x0b, 0x6d, 0x08, 0x1a, 0xa2, 0xb1, 0x73, 0x3e,
	0xf0, 0xfe, 0x07, 0x3c, 0xb3, 0x1c, 0x7e, 0xe4, 0x9c, 0xd6, 0xeb, 0x98, 0xc0, 0x31, 0x8b, 0x22,
	0x51, 0x65, 0x92, 0x34, 0x86, 0x68, 0xdc, 0xa1, 0xc6, 0x62, 0x0c, 0x76, 0xc6, 0x52, 0x4e, 0x2c,
	0x8d, 0xb5, 0xc6, 0x2e, 0x58, 0xa9, 0xdc, 0x12, 0x7b, 0x88, 0xc6, 0x3d, 0xaa, 0x24, 0x3e, 0x85,
	0xe6, 0x8e, 0x6d, 0x2b, 0x4e, 0x9a, 0x9a, 0xed, 0x8d, 0xa2, 0xfc, 0x5d, 0x16, 0x8c, 0xb4, 0xf6,
	0x54, 0x9b, 0xd1, 0x25, 0x74, 0xe7, 0xe2, 0x2d, 0x2c, 0x38, 0xbf, 0x63, 0x65, 0xac, 0x2e, 0x28,
	0x93, 0x4f, 0xae, 0x1b, 0x5b, 0x54, 0x6b, 0xc5, 0x62, 0x56, 0xc6, 0xba, 0x4b, 0x8f, 0x6a, 0x3d,
	0x1a, 0x40, 0x7b, 0xce, 0xd9, 0xab, 0x2f, 0x36, 0x87, 0x02, 0xe8, 0x50, 0x40, 0x4d, 0xd5, 0x89,
	0xf5, 0x34, 0xae, 0xa7, 0xf1, 0xd9, 0x17, 0x82, 0xde, 0xdf, 0xa7, 0xe3, 0x3e, 0x74, 0x17, 0xcb,
	0x70, 0xb5, 0xf4, 0xef, 0xfd, 0xe0, 0xc9, 0x77, 0x8f, 0x30, 0x06, 0x47, 0x81, 0x79, 0x70, 0xbb,
	0xba, 0xa1, 0xb3, 0x49, 0x38, 0x73, 0x11, 0x3e, 0x81, 0xbe, 0x61, 0xd3, 0xd9, 0x63, 0x48, 0x83,
	0x67, 0xb7, 0x61, 0x92, 0x0a, 0x4e, 0xa6, 0x53, 0xd7, 0x32, 0xc9, 0xc5, 0xe4, 0xc1, 0x24, 0x6d,
	0x93, 0x54, 0xcc, 0x24, 0x9b, 0xd7, 0xf6, 0x4b, 0x23, 0x5f, 0xaf, 0x5b, 0xfa, 0x27, 0x2f, 0x7e,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x0e, 0xb8, 0x36, 0xe0, 0xdb, 0x01, 0x00, 0x00,
}
