// Code generated by protoc-gen-go.
// source: mutation.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Mutation struct {
	Namespace []byte `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// one of the following
	LogCreate   *LogCreateRequest   `protobuf:"bytes,2,opt,name=log_create,json=logCreate" json:"log_create,omitempty"`
	MapCreate   *MapCreateRequest   `protobuf:"bytes,3,opt,name=map_create,json=mapCreate" json:"map_create,omitempty"`
	LogDelete   *LogDeleteRequest   `protobuf:"bytes,4,opt,name=log_delete,json=logDelete" json:"log_delete,omitempty"`
	MapDelete   *MapDeleteRequest   `protobuf:"bytes,5,opt,name=map_delete,json=mapDelete" json:"map_delete,omitempty"`
	LogAddEntry *LogAddEntryRequest `protobuf:"bytes,6,opt,name=log_add_entry,json=logAddEntry" json:"log_add_entry,omitempty"`
}

func (m *Mutation) Reset()                    { *m = Mutation{} }
func (m *Mutation) String() string            { return proto.CompactTextString(m) }
func (*Mutation) ProtoMessage()               {}
func (*Mutation) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Mutation) GetNamespace() []byte {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *Mutation) GetLogCreate() *LogCreateRequest {
	if m != nil {
		return m.LogCreate
	}
	return nil
}

func (m *Mutation) GetMapCreate() *MapCreateRequest {
	if m != nil {
		return m.MapCreate
	}
	return nil
}

func (m *Mutation) GetLogDelete() *LogDeleteRequest {
	if m != nil {
		return m.LogDelete
	}
	return nil
}

func (m *Mutation) GetMapDelete() *MapDeleteRequest {
	if m != nil {
		return m.MapDelete
	}
	return nil
}

func (m *Mutation) GetLogAddEntry() *LogAddEntryRequest {
	if m != nil {
		return m.LogAddEntry
	}
	return nil
}

type LeafNode struct {
	Mth []byte `protobuf:"bytes,1,opt,name=mth,proto3" json:"mth,omitempty"`
}

func (m *LeafNode) Reset()                    { *m = LeafNode{} }
func (m *LeafNode) String() string            { return proto.CompactTextString(m) }
func (*LeafNode) ProtoMessage()               {}
func (*LeafNode) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *LeafNode) GetMth() []byte {
	if m != nil {
		return m.Mth
	}
	return nil
}

type TreeNode struct {
	Mth []byte `protobuf:"bytes,1,opt,name=mth,proto3" json:"mth,omitempty"`
}

func (m *TreeNode) Reset()                    { *m = TreeNode{} }
func (m *TreeNode) String() string            { return proto.CompactTextString(m) }
func (*TreeNode) ProtoMessage()               {}
func (*TreeNode) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *TreeNode) GetMth() []byte {
	if m != nil {
		return m.Mth
	}
	return nil
}

type LogTreeHash struct {
	Mth []byte `protobuf:"bytes,1,opt,name=mth,proto3" json:"mth,omitempty"`
}

func (m *LogTreeHash) Reset()                    { *m = LogTreeHash{} }
func (m *LogTreeHash) String() string            { return proto.CompactTextString(m) }
func (*LogTreeHash) ProtoMessage()               {}
func (*LogTreeHash) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *LogTreeHash) GetMth() []byte {
	if m != nil {
		return m.Mth
	}
	return nil
}

type EntryIndex struct {
	Index int64 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
}

func (m *EntryIndex) Reset()                    { *m = EntryIndex{} }
func (m *EntryIndex) String() string            { return proto.CompactTextString(m) }
func (*EntryIndex) ProtoMessage()               {}
func (*EntryIndex) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *EntryIndex) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type MapNode struct {
	Number int64 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	// for parent nodes only
	LeftNumber  int64  `protobuf:"varint,2,opt,name=left_number,json=leftNumber" json:"left_number,omitempty"`
	RightNumber int64  `protobuf:"varint,3,opt,name=right_number,json=rightNumber" json:"right_number,omitempty"`
	LeftHash    []byte `protobuf:"bytes,4,opt,name=left_hash,json=leftHash,proto3" json:"left_hash,omitempty"`
	RightHash   []byte `protobuf:"bytes,5,opt,name=right_hash,json=rightHash,proto3" json:"right_hash,omitempty"`
	// for leaf nodes only
	DataHash      []byte `protobuf:"bytes,6,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	RemainingPath []byte `protobuf:"bytes,7,opt,name=remaining_path,json=remainingPath,proto3" json:"remaining_path,omitempty"`
	Path          []byte `protobuf:"bytes,8,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *MapNode) Reset()                    { *m = MapNode{} }
func (m *MapNode) String() string            { return proto.CompactTextString(m) }
func (*MapNode) ProtoMessage()               {}
func (*MapNode) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *MapNode) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *MapNode) GetLeftNumber() int64 {
	if m != nil {
		return m.LeftNumber
	}
	return 0
}

func (m *MapNode) GetRightNumber() int64 {
	if m != nil {
		return m.RightNumber
	}
	return 0
}

func (m *MapNode) GetLeftHash() []byte {
	if m != nil {
		return m.LeftHash
	}
	return nil
}

func (m *MapNode) GetRightHash() []byte {
	if m != nil {
		return m.RightHash
	}
	return nil
}

func (m *MapNode) GetDataHash() []byte {
	if m != nil {
		return m.DataHash
	}
	return nil
}

func (m *MapNode) GetRemainingPath() []byte {
	if m != nil {
		return m.RemainingPath
	}
	return nil
}

func (m *MapNode) GetPath() []byte {
	if m != nil {
		return m.Path
	}
	return nil
}

func init() {
	proto.RegisterType((*Mutation)(nil), "continusec.verifiabledatastructures.server.store.Mutation")
	proto.RegisterType((*LeafNode)(nil), "continusec.verifiabledatastructures.server.store.LeafNode")
	proto.RegisterType((*TreeNode)(nil), "continusec.verifiabledatastructures.server.store.TreeNode")
	proto.RegisterType((*LogTreeHash)(nil), "continusec.verifiabledatastructures.server.store.LogTreeHash")
	proto.RegisterType((*EntryIndex)(nil), "continusec.verifiabledatastructures.server.store.EntryIndex")
	proto.RegisterType((*MapNode)(nil), "continusec.verifiabledatastructures.server.store.MapNode")
}

func init() { proto.RegisterFile("mutation.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x93, 0x5f, 0x8b, 0xd3, 0x40,
	0x14, 0xc5, 0x69, 0xd3, 0x76, 0x9b, 0x9b, 0xee, 0x22, 0x83, 0x48, 0x70, 0x57, 0x76, 0x2d, 0x08,
	0xfb, 0x14, 0x44, 0x9f, 0xc4, 0x27, 0xff, 0x81, 0x42, 0xbb, 0x48, 0xf0, 0x41, 0x7c, 0x09, 0xb7,
	0xc9, 0x6d, 0x32, 0x90, 0xcc, 0xc4, 0x99, 0xc9, 0xa2, 0x1f, 0xdb, 0x47, 0xdf, 0x64, 0x6e, 0x92,
	0x5d, 0x59, 0x14, 0xb6, 0x6f, 0x33, 0xbf, 0x73, 0xee, 0xb9, 0x87, 0x4e, 0x03, 0x27, 0x4d, 0xe7,
	0xd0, 0x49, 0xad, 0x92, 0xd6, 0x68, 0xa7, 0xc5, 0xf3, 0x5c, 0x2b, 0x27, 0x55, 0x67, 0x29, 0x4f,
	0xae, 0xc9, 0xc8, 0xbd, 0xc4, 0x5d, 0x4d, 0x05, 0x3a, 0xb4, 0xce, 0x74, 0xb9, 0xeb, 0x0c, 0xd9,
	0xc4, 0x92, 0xb9, 0x26, 0x93, 0x58, 0xa7, 0x0d, 0x3d, 0x0e, 0xb1, 0x95, 0xfd, 0xf0, 0xfa, 0x57,
	0x00, 0xcb, 0xed, 0x90, 0x27, 0xce, 0x20, 0x54, 0xd8, 0x90, 0x6d, 0x31, 0xa7, 0x78, 0x72, 0x31,
	0xb9, 0x5c, 0xa5, 0xb7, 0x40, 0x7c, 0x05, 0xa8, 0x75, 0x99, 0xe5, 0x86, 0xd0, 0x51, 0x3c, 0xbd,
	0x98, 0x5c, 0x46, 0x2f, 0x5e, 0x25, 0xf7, 0x59, 0xee, 0xd7, 0x6d, 0x74, 0xf9, 0x8e, 0x27, 0x53,
	0xfa, 0xde, 0x91, 0x75, 0x69, 0x58, 0x8f, 0xc4, 0x27, 0x37, 0xd8, 0x8e, 0xc9, 0xc1, 0x81, 0xc9,
	0x5b, 0x6c, 0xef, 0x24, 0x37, 0x23, 0x19, 0x3b, 0x17, 0x54, 0x93, 0xa3, 0x78, 0x76, 0x78, 0xe7,
	0xf7, 0x3c, 0xf9, 0x77, 0xe7, 0x9e, 0x8c, 0x9d, 0x87, 0xe4, 0xf9, 0xe1, 0x9d, 0xef, 0x24, 0x37,
	0x23, 0x11, 0x19, 0x1c, 0xfb, 0xce, 0x58, 0x14, 0x19, 0x29, 0x67, 0x7e, 0xc6, 0x0b, 0x0e, 0x7f,
	0x7d, 0x48, 0xed, 0x37, 0x45, 0xf1, 0xc1, 0xcf, 0x8e, 0xf1, 0x51, 0x7d, 0xcb, 0xd6, 0x67, 0xb0,
	0xdc, 0x10, 0xee, 0xaf, 0x74, 0x41, 0xe2, 0x01, 0x04, 0x8d, 0xab, 0x86, 0xc7, 0xf6, 0x47, 0xaf,
	0x7e, 0x31, 0x44, 0xff, 0x51, 0xcf, 0x21, 0xda, 0xe8, 0xd2, 0x1b, 0x3e, 0xa2, 0xad, 0xfe, 0x61,
	0x58, 0x03, 0xf0, 0x96, 0x4f, 0xaa, 0xa0, 0x1f, 0xe2, 0x21, 0xcc, 0xa5, 0x3f, 0xb0, 0x23, 0x48,
	0xfb, 0xcb, 0xfa, 0xf7, 0x04, 0x8e, 0xb6, 0xd8, 0xf2, 0x8a, 0x47, 0xb0, 0x50, 0x5d, 0xb3, 0x23,
	0x33, 0x58, 0x86, 0x9b, 0x38, 0x87, 0xa8, 0xa6, 0xbd, 0xcb, 0x06, 0x71, 0xca, 0x22, 0x78, 0x74,
	0xd5, 0x1b, 0x9e, 0xc2, 0xca, 0xc8, 0xb2, 0xba, 0x71, 0x04, 0xec, 0x88, 0x98, 0x0d, 0x96, 0x53,
	0x08, 0x39, 0xa3, 0x42, 0x5b, 0xf1, 0xe3, 0xaf, 0xd2, 0xa5, 0x07, 0x5c, 0xfd, 0x09, 0x40, 0x3f,
	0xcf, 0xea, 0xbc, 0xff, 0xb7, 0x33, 0x61, 0xf9, 0x14, 0x42, 0xff, 0xd3, 0xf6, 0xea, 0xa2, 0x9f,
	0xf5, 0x80, 0xc5, 0x67, 0x70, 0x62, 0xa8, 0x41, 0xa9, 0xa4, 0x2a, 0xb3, 0x16, 0x5d, 0x15, 0x1f,
	0xb1, 0xe3, 0xf8, 0x86, 0x7e, 0x46, 0x57, 0x09, 0x01, 0x33, 0x16, 0x97, 0x2c, 0xf2, 0xf9, 0xed,
	0xec, 0xdb, 0xb4, 0xdd, 0xed, 0x16, 0xfc, 0xf5, 0xbd, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0xf3,
	0x2b, 0xd1, 0x10, 0xcc, 0x03, 0x00, 0x00,
}
