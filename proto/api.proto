/*

Copyright 2017 Continusec Pty Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/

syntax = "proto3";

package com.continusec.verifiabledatastructures.api;
option go_package = "pb";

service VerifiableDataStructuresService {
    rpc LogAddEntry (LogAddEntryRequest) returns (LogAddEntryResponse) {}
    rpc LogFetchEntries (LogFetchEntriesRequest) returns (LogFetchEntriesResponse) {}

    rpc LogTreeHash (LogTreeHashRequest) returns (LogTreeHashResponse) {}
    rpc LogInclusionProof (LogInclusionProofRequest) returns (LogInclusionProofResponse) {}
    rpc LogConsistencyProof (LogConsistencyProofRequest) returns (LogConsistencyProofResponse) {}

    rpc MapSetValue (MapSetValueRequest) returns (MapSetValueResponse) {}
    rpc MapGetValue (MapGetValueRequest) returns (MapGetValueResponse) {}

    rpc MapTreeHash (MapTreeHashRequest) returns (MapTreeHashResponse) {}
}

enum LogType {
    STRUCT_TYPE_LOG = 0; // default to user log
    STRUCT_TYPE_MUTATION_LOG = 1;
    STRUCT_TYPE_TREEHEAD_LOG = 2;
}

message AccountRef {
    string id = 1;
    string api_key = 2;
}

message LogRef {
    AccountRef account = 1;
    LogType log_type = 2;
    string name = 3;
}

message MapRef {
    AccountRef account = 1;
    string name = 3;
}

message LogTreeHashRequest {
    LogRef log = 1;
    int64 tree_size = 2;
}

message LogTreeHashResponse {
    int64 tree_size = 1;
    bytes root_hash = 2;
}

message MapTreeHashRequest {
    MapRef map = 1;
    int64 tree_size = 2;
}

message MapTreeHashResponse {
    bytes root_hash = 1;
    LogTreeHashResponse mutation_log = 2;
}

message LogInclusionProofRequest {
    LogRef log = 1;
    int64 tree_size = 2; // may be 0 (HEAD)

    // One of:
    bytes mtl_hash = 3; // used, if not nil
    int64 leaf_index = 4; // used if mtl_hash is nil
}

message LogInclusionProofResponse {
    int64 tree_size = 1;
    int64 leaf_index = 2;
    repeated bytes audit_path = 3;
}

message LogConsistencyProofRequest {
    LogRef log = 1;
    int64 from_size = 2;
    int64 tree_size = 3; // may be 0 (HEAD)
}

message LogConsistencyProofResponse {
    int64 from_size = 1;
    int64 tree_size = 2;
    repeated bytes audit_path = 3;
}

enum DataFormat {
    UNSPECIFIED = 0;
    JSON = 1;
}

message LeafData {
    bytes leaf_input = 1;
    bytes extra_data = 2; // ignored by the server, returned to the user, who may have business logic to confirm that the leaf_input has been derived from this, e.g. objecthash
    DataFormat format = 3; // optional, if set, can define metadata about the format of the ExtraData. e.g. if set to JSON, fields will be filtered.
}

message LogAddEntryRequest {
    LogRef log = 1;
    LeafData value = 2;
}

message LogAddEntryResponse {
    bytes leaf_hash = 1;
}

message MapSetValueRequest {
    MapRef map = 1;
    MapMutation mutation = 2;
}

message MapSetValueResponse {
    bytes leaf_hash = 1; // of mutation log entry
}

message MapGetValueRequest {
    MapRef map = 1;
    int64 tree_size = 2;
    bytes key = 3;
}

message MapGetValueResponse {
    int64 tree_size = 1;
    repeated bytes audit_path = 2; // up to 256 long. Consumers should substitute empties and missing for known defaults.
    LeafData value = 3;
}

message LogFetchEntriesRequest {
    LogRef log = 1;
    int64 first = 2; // inclusive
    int64 last = 3; // exclusive, may be HEAD(0)
}

message LogFetchEntriesResponse {
    repeated LeafData values = 1;
}

message MapMutation {
    string timestamp = 1; // Set by the server. RFC3339 - may not be applied in order. Added as a rough nonce.
    string action  = 2;   // One of "set", "delete", "update"
    bytes key = 3;
    LeafData value = 4;
    bytes previous_leaf_hash = 5;
}
