/*

Copyright 2017 Continusec Pty Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/

syntax = "proto3";

package continusec.verifiabledatastructures.api;
option go_package = "pb";

service VerifiableDataStructuresService {
    rpc LogCreate (LogCreateRequest) returns (LogCreateResponse) {}
    rpc LogDelete (LogDeleteRequest) returns (LogDeleteResponse) {}
    rpc LogList (LogListRequest) returns (LogListResponse) {}

    rpc LogAddEntry (LogAddEntryRequest) returns (LogAddEntryResponse) {}
    rpc LogFetchEntries (LogFetchEntriesRequest) returns (LogFetchEntriesResponse) {}

    rpc LogTreeHash (LogTreeHashRequest) returns (LogTreeHashResponse) {}
    rpc LogInclusionProof (LogInclusionProofRequest) returns (LogInclusionProofResponse) {}
    rpc LogConsistencyProof (LogConsistencyProofRequest) returns (LogConsistencyProofResponse) {}

    rpc MapCreate (MapCreateRequest) returns (MapCreateResponse) {}
    rpc MapDelete (MapDeleteRequest) returns (MapDeleteResponse) {}
    rpc MapList (MapListRequest) returns (MapListResponse) {}

    rpc MapSetValue (MapSetValueRequest) returns (MapSetValueResponse) {}
    rpc MapGetValue (MapGetValueRequest) returns (MapGetValueResponse) {}

    rpc MapTreeHash (MapTreeHashRequest) returns (MapTreeHashResponse) {}
}

enum LogType {
    STRUCT_TYPE_LOG = 0; // default to user log
    STRUCT_TYPE_MUTATION_LOG = 1;
    STRUCT_TYPE_TREEHEAD_LOG = 2;
}

message AccountRef {
    string id = 1;
    string api_key = 2;
}

message LogRef {
    AccountRef account = 1;
    LogType log_type = 2;
    string name = 3;
}

message MapRef {
    AccountRef account = 1;
    string name = 3;
}

message LogCreateRequest {
    LogRef log = 1;
}

message LogCreateResponse {}

message LogDeleteRequest {
    LogRef log = 1;
}

message LogDeleteResponse {}

message LogListRequest {
    AccountRef account = 1;
}

message LogInfo {
    string name = 1;
}

message LogListResponse {
    repeated LogInfo logs = 1;
}

message MapCreateRequest {
    MapRef map = 1;
}

message MapCreateResponse {}

message MapDeleteRequest {
    MapRef map = 1;
}

message MapDeleteResponse {}

message MapListRequest {
    AccountRef account = 1;
}

message MapInfo {
    string name = 1;
}

message MapListResponse {
    repeated MapInfo Maps = 1;
}

message LogTreeHashRequest {
    LogRef log = 1;
    int64 tree_size = 2;
}

message LogTreeHashResponse {
    int64 tree_size = 1;
    bytes root_hash = 2;
}

message MapTreeHashRequest {
    MapRef map = 1;
    int64 tree_size = 2;
}

message MapTreeHashResponse {
    bytes root_hash = 1;
    LogTreeHashResponse mutation_log = 2;
}

message LogInclusionProofRequest {
    LogRef log = 1;
    int64 tree_size = 2; // may be 0 (HEAD)

    // One of:
    bytes mtl_hash = 3; // used, if not nil
    int64 leaf_index = 4; // used if mtl_hash is nil
}

message LogInclusionProofResponse {
    int64 tree_size = 1;
    int64 leaf_index = 2;
    repeated bytes audit_path = 3;
}

message LogConsistencyProofRequest {
    LogRef log = 1;
    int64 from_size = 2;
    int64 tree_size = 3; // may be 0 (HEAD)
}

message LogConsistencyProofResponse {
    int64 from_size = 1;
    int64 tree_size = 2;
    repeated bytes audit_path = 3;
}

enum EntryFormat {
    ENTRY_FORMAT_RAW = 0;
    ENTRY_FORMAT_JSON = 1;
    ENTRY_FORMAT_JSON_REDACTED = 2;
    ENTRY_FORMAT_MUTATION = 4;
}

message HashableData {
    EntryFormat format = 1;
    bytes value = 2;
}

message LogAddEntryRequest {
    LogRef log = 1;
    HashableData data = 2;
}

message LogAddEntryResponse {
    bytes leaf_hash = 1;
}

enum MapMutationAction {
    MAP_MUTATION_SET = 0;
    MAP_MUTATION_DELETE = 1;
    MAP_MUTATION_UPDATE = 2;
}

message MapSetValueRequest {
    MapRef map = 1;

    MapMutationAction action = 2;

    bytes key = 3;
    HashableData value = 4; // if MAP_MUTATION_SET or MAP_MUTATION_UPDATE
    bytes prev_leaf_hash = 5; // if MAP_MUTATION_UPDATE
}

message MapSetValueResponse {
    bytes leaf_hash = 1; // of mutation log entry
}

message MapGetValueRequest {
    MapRef map = 1;
    int64 tree_size = 2;
    bytes key = 3;
    EntryFormat format = 4;
}

message MapGetValueResponse {
    int64 tree_size = 1;
    repeated bytes audit_path = 2; // up to 256 long. Consumers should substitute empties and missing for known defaults.
    HashableData value = 3;
}

message LogFetchEntriesRequest {
    LogRef log = 1;
    int64 first = 2; // inclusive
    int64 last = 3; // exclusive, may be HEAD(0)
    EntryFormat format = 4;
}

message LogFetchEntriesResponse {
    repeated HashableData values = 1;
}
