/*

Copyright 2017 Continusec Pty Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/

syntax = "proto3";

package com.continusec.verifiabledatastructures.storage;
option go_package = "pb";


import "api.proto";

message Mutation {
    bytes namespace = 1;

    // one of the following
    com.continusec.verifiabledatastructures.api.LogAddEntryRequest log_add_entry = 2;
    // we don't have map set value, as that generates a LogAddEntryRequest to the underlying mutation log
}

message LeafNode {
    bytes mth = 1;
}

message TreeNode {
    bytes mth = 1;
}

message LogTreeHash {
    bytes mth = 1;
}

message EntryIndex {
    int64 index = 1;
}

message ObjectSize {
    int64 size = 1;
}

message MapNode {
    // A map node is either and parent, or it is considered a leaf.

    // If a node has `leaf_hash` set to len() > 0, then it is leaf.
    // When it is a leaf, `path` must be set, however all other fields are ignored
    // It's root hash may be calculated based on those two fields alone

    // If a node, is a parent, then `left_number` and `right_number`, if non-zero, indicate
    // the next nodes to descend to. If they are zero, then the root hash for that side of
    // the nodes is is default value for that depth.
    // If they are non-zero, then `left_hash`/`right_hash` must be set, which contains
    // the cached value of the hash for that side of the tree.



    // for parent nodes only
    int64 left_number = 1;  // if zero, default
    int64 right_number = 2; // if zero, default

    // set for parents only, if corresponding entry is non-zero
    bytes left_hash = 3;    // set if left is non-zero
    bytes right_hash = 4;   // set if right is non-zero

    // for leaf nodes only
    bytes leaf_hash = 6;      // if set, both left and right num must be zero
    bytes path = 7;           // if set, both left and right num must be zero
}
